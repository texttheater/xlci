[]
prelude =
	# Languages currently supported:
	langs = ('deu', 'fra', 'ita', 'nld', 'por', 'rus', 'spa', 'swe', 'tur')
	# Helpers for language names, supporting various naming schemes:
	twoletter_langs = {
		'deu': 'de',
		'fra': 'fr',
		'ita': 'it',
		'nld': 'nl',
		'por': 'pt',
		'spa': 'es',
		'swe': 'sv',
	}
	ud_langs = {
		'de': 'German',
		'fr': 'French',
		'it': 'Italian',
		'nl': 'Dutch',
		'pt': 'Portuguese',
		'ru': 'Russian',
		'es': 'Spanish',
		'sv': 'Swedish',
		'tr': 'Turkish',
	}
	# External evaluation datasets by language:
	xdata = {
		'deu': ('conllx-german_tiger_test_10', 'de-ud-dev', 'de-ud-test'),
		'fra': ('fr-ud-dev', 'fr-ud-test'),
		'nld': ('pascal-dutch_dev_10', 'pascal-dutch_dev_15', 'pascal-dutch_test_10', 'pascal-dutch_test_15', 'conllx-dutch_alpino_test_10', 'nl-ud-dev', 'nl-ud-test'),
		'por': ('pascal-portuguese_dev_10', 'pascal-portuguese_dev_15', 'pascal-portuguese_test_10', 'pascal-portuguese_test_15', 'conllx-portuguese_bosque_test_10', 'pt-ud-dev', 'pt-ud-test'),
		'spa': ('conllx-spanish_cast3lb_test_10', 'es-ud-dev', 'es-ud-test'),
		'swe': ('pascal-swedish_dev_10', 'pascal-swedish_dev_15', 'pascal-swedish_test_10', 'pascal-swedish_test_15', 'conllx-swedish_talbanken05_test_10', 'sv-ud-dev', 'sv-ud-test'),
		'rus': ('tr-ud-dev', 'tr-ud-test', 'ru-ud-dev', 'ru-ud-test'),
		'tur': ('tr-ud-dev', 'tr-ud-test', 'tr-ud-dev', 'tr-ud-test'),
	}
	# We could add more languages here but we'd need a tokenizer for them.
	# TODO The default dataset in UD v2.1 is not always the best one
	def dep_style(portion):
		if portion in ('dev', 'test', 'trial'):
			return 'mod'
		elif 'dutch' in portion:
			return 'bisk_nl'
		elif 'spanish' in portion or 'german' in portion or 'portuguese' in portion:
			return 'bisk_esdept'
		elif 'swedish' in portion:
			return 'bisk_sv'
		elif '-ud-' in portion:
			return 'ud'
		else:
			raise ArgumentError('unknown data: ' + portion)
		

# CONVERTING EXTERNAL EVALUATION DATA #########################################

[out/%{portion}.%{lang}-eng.trg.gold.deps]
cond = %{portion in xdata[lang] and portion.startswith('conllx-')}
lang_name = %{portion[7:].split('_')[0]}
corpus = %{portion[7:].split('_')[1]}
local_portion = %{portion[7:].split('_')[2]}
length = %{int(portion[7:].split('_')[3])}
dep.conll = data/conll2006_ten_lang/data/%{lang_name}/%{corpus}/%{local_portion}/%{lang_name}_%{corpus}_%{local_portion}_gs.conll
dep.sentlen = src/python/sentlen.py
dep.conllx2deps = src/python/conllx2deps.py
recipe =
	set -e
	set -o pipefail
	cat %{conll} | dos2unix | python3 %{sentlen} %{length} | python3 %{conllx2deps} > %{target}

[out/%{portion}.%{lang}-eng.trg.gold.deps]
cond = %{portion in xdata[lang] and portion.startswith('pascal-')}
lang_name = %{portion[7:].split('_')[0]}
local_portion = %{portion[7:].split('_')[1]}
length = %{int(portion[7:].split('_')[2])}
dep.naacl = data/NAACL/%{local_portion}/%{lang_name}.naacl.gz
dep.sentlen = src/python/sentlen.py
dep.conllx2deps = src/python/conllx2deps.py
recipe =
	set -e
	set -o pipefail
	zcat %{naacl} | python3 %{sentlen} %{length} | cut -f 1-5,7- | python3 %{conllx2deps} > %{target}

[out/%{portion}.%{lang}-eng.trg.gold.deps]
cond = %{portion in xdata[lang] and '-ud-' in portion}
lang_name = %{portion.split('-')[0]}
local_portion = %{portion.split('-')[2]}
dep.conllu = data/ud-treebanks-v2.1/UD_%{ud_langs[lang]}/%{portion}.conllu
dep.conllu2conllx = src/python/conllu2conllx.py
dep.conllx2deps = src/python/conllx2deps.py
recipe =
	set -e
	set -o pipefail
	cat %{conllu} | python3 %{conllu2conllx} | python3 %{conllx2deps} > %{target}

# TOKENIZATION ################################################################

[go/bin/iobify]
recipe = GOPATH=`pwd`/go go get github.com/texttheater/iobify/iobify

[out/%{portion}.%{lang}-eng.%{side}.tok.off]
cond = %{portion in ('proj1', 'train', 'trial', 'dev', 'test') and lang in langs and side in ('src', 'trg')}
dep.iobify = go/bin/iobify
dep.raw = data/%{portion}.%{lang}-eng.%{side}.raw
dep.tok = data/%{portion}.%{lang}-eng.%{side}.tok
dep.iob2off = src/python/iob2off.py
recipe =
	set -e
	set -o pipefail
	%{iobify} %{raw} %{tok} | python %{iob2off} > %{target}

# FILTERING ###################################################################

# TODO remove this part - already done in ccgweb repository.

# Keep only the document pairs where each side has exactly one sentence:

[out/%{portion}.%{lang}-eng.ftok]
cond = %{portion in ('proj1', 'train', 'trial', 'dev', 'test') and lang in langs}
dep.tok_merge = src/python/tok_merge.py
dep.trg = data/%{portion}.%{lang}-eng.trg.tok
dep.src = data/%{portion}.%{lang}-eng.src.tok
recipe =
	set -e
	mkdir -p out
	python3 %{tok_merge} %{trg} %{src} > %{target}

[out/%{portion}.%{lang}-eng.src.ftok]
cond = %{portion in ('proj1', 'train', 'trial', 'dev', 'test') and lang in langs}
dep.ftok = out/%{portion}.%{lang}-eng.ftok
recipe =
	set -e
	set -o pipefail
	cat %{ftok} | cut -d '	' -f 2 > %{target}

[out/%{portion}.%{lang}-eng.trg.ftok]
cond = %{portion in ('proj1', 'train', 'trial', 'dev', 'test') and lang in langs}
dep.ftok = out/%{portion}.%{lang}-eng.ftok
recipe =
	set -e
	set -o pipefail
	cat %{ftok} | cut -d '	' -f 1 > %{target}

[out/%{portion}.%{lang}-eng.trg.ftok]
cond = %{portion in xdata[lang] and lang in langs}
dep.deps = out/%{portion}.%{lang}-eng.trg.gold.deps
recipe =
	set -e
	set -o pipefail
	cat %{deps} | cut -f 2 | tr '\n' ' ' | sed -e 's/  /\n/g' > %{target}

[out/%{portion}.%{lang}-eng.%{side}.ftok.off]
cond = %{portion in ('proj1', 'train', 'trial', 'dev', 'test') and lang in langs and side in ('src', 'trg')}
dep.ftok = out/%{portion}.%{lang}-eng.%{side}.ftok
dep.off = out/%{portion}.%{lang}-eng.%{side}.tok.off
dep.off_filter = src/python/off_filter.py
recipe =
	set -e
	set -o pipefail
	python3 %{off_filter} %{ftok} %{off} > %{target}

# WORD ALIGNMENT ##############################################################

# These rules follow the tutorial at:
# http://fabioticconi.wordpress.com/2011/01/17/how-to-do-a-word-alignment-with-giza-or-mgiza-from-parallel-corpus/

# Convert to lower case and swap src and trg (!)
[out/%{portion}.%{lang}-eng.%{side}.low]
cond = %{portion in ('proj1', 'train') and lang in langs and side in ('src', 'trg')}
oldside = %{'trg' if side == 'src' else 'src'}
dep.ftok = out/%{portion}.%{lang}-eng.%{oldside}.ftok
recipe =
	set -e
	set -o pipefail
	cat %{ftok} | tr '[:upper:]' '[:lower:]' > %{target}

# Create vocabulary files and numeric versions of texts
[out/%{portion}.%{lang}-eng.%{side}.%{x}]
cond = %{portion in ('proj1', 'train') and lang in langs and side in ('src', 'trg') and x in ('snt', 'vcb')}
srcsnt = out/%{portion}.%{lang}-eng.src.snt
trgsnt = out/%{portion}.%{lang}-eng.trg.snt
srcvcb = out/%{portion}.%{lang}-eng.src.vcb
trgvcb = out/%{portion}.%{lang}-eng.trg.vcb
outputs = %{srcsnt} %{trgsnt} %{srcvcb} %{trgvcb}
dep.srclow = out/%{portion}.%{lang}-eng.src.low
dep.trglow = out/%{portion}.%{lang}-eng.trg.low
recipe =
	set -e
	set -o pipefail
	./ext/mgizapp/bin/plain2snt %{trglow} %{srclow} -vcb1 %{trgvcb} -vcb2 %{srcvcb} -snt1 %{trgsnt} -snt2 %{srcsnt}
	touch %{outputs}

# Cluster vocabulary into classes
[out/%{portion}.%{lang}-eng.%{side}.vcb.classes]
cond = %{portion in ('proj1', 'train') and lang in langs and side in ('src', 'trg')}
dep.low = out/%{portion}.%{lang}-eng.%{side}.low
recipe = ./ext/mgizapp/bin/mkcls -n10 -p%{low} -V%{target}

# Make co-occurrence file
[out/%{portion}.%{lang}-eng.cooc]
cond = %{portion in ('proj1', 'train') and lang in langs}
dep.srcvcb = out/%{portion}.%{lang}-eng.src.vcb
dep.trgvcb = out/%{portion}.%{lang}-eng.trg.vcb
dep.srcvcbclasses = out/%{portion}.%{lang}-eng.src.vcb.classes
dep.trgvcbclasses = out/%{portion}.%{lang}-eng.trg.vcb.classes
dep.snt = out/%{portion}.%{lang}-eng.src.snt
recipe = ./ext/mgizapp/bin/snt2cooc %{target} %{srcvcb} %{trgvcb} %{snt}

# Word-align
[out/%{portion}.%{lang}-eng.dict]
cond = %{portion in ('proj1', 'train') and lang in langs}
dep.srcvcb = out/%{portion}.%{lang}-eng.src.vcb
dep.trgvcb = out/%{portion}.%{lang}-eng.trg.vcb
dep.snt = out/%{portion}.%{lang}-eng.src.snt
dep.cooc = out/%{portion}.%{lang}-eng.cooc
outputfileprefix = out/%{portion}.%{lang}-eng.dict
ncpus = 4
dep.dict_sort = src/python/dict_sort.py
recipe =
	set -e
	set -o pipefail
	(./ext/mgizapp/bin/mgiza -ncpus %{ncpus} -sourcevocabularyfile %{srcvcb} -targetvocabularyfile %{trgvcb} -corpusfile %{snt} -outputfileprefix %{outputfileprefix} -coocurrencefile %{cooc} -nbestalignments 10 1>&2) 2> %{target}.log
	cat %{'out/{}.{}-eng.dict.A3.final.part{}NBEST'.format(portion, lang, chr(48 + i)) for i in range(int(ncpus))} | python3 %{dict_sort} > %{target}

[out/%{portion}.%{lang}-eng.%{nbest}.wordalign]
cond = %{portion in ('proj1', 'train') and lang in langs and nbest.isdigit()}
dep.dict = out/%{portion}.%{lang}-eng.dict
dep.srcoff = out/%{portion}.%{lang}-eng.src.ftok.off
dep.trgoff = out/%{portion}.%{lang}-eng.trg.ftok.off
dep.wordalign = src/python/wordalign.py
recipe = python3 %{wordalign} %{dict} %{srcoff} %{trgoff} %{nbest} > %{target}

[out/%{portion}.%{lang}-eng.%{nbest}.wordalign]
cond = %{portion in ('trial', 'dev', 'test') and lang in langs and nbest.isdigit()}
dep.proj1_ftok = out/proj1.%{lang}-eng.ftok
dep.proj1_wordalign = out/proj1.%{lang}-eng.%{nbest}.wordalign
dep.portion_ftok = out/%{portion}.%{lang}-eng.ftok
dep.wordalign_pick = src/python/wordalign_pick.py
recipe = python3 %{wordalign_pick} %{proj1_ftok} %{proj1_wordalign} %{portion_ftok} > %{target}

### STUPID BASELINE ###########################################################

[out/%{portion}.%{lang}-eng.trg.baseline.parse]
cond = %{portion in ('trial', 'dev', 'test') and lang in langs}
dep.tok = out/%{portion}.%{lang}-eng.trg.ftok
dep.easyccg = ext/easyccg/easyccg.jar
dep.model = models/parse/eng.model
recipe =
	set -e
	set -o pipefail
	cat %{tok} | java -jar %{easyccg} --model %{model} --rootCategories S[dcl] S[wq] S[q] NP S[b]\\NP S[intj] --outputFormat boxer > %{target}

[out/%{portion}.%{lang}-eng.trg.baseline.parse.tags]
cond = %{portion in ('trial', 'dev', 'test') and lang in langs}
dep.parse = out/%{portion}.%{lang}-eng.trg.baseline.parse
dep.off = out/%{portion}.%{lang}-eng.trg.ftok.off
dep.cac_add_offsets = src/python/cac_add_offsets.py
deps = src/python/caclib.py src/python/offlib.py src/python/util.py src/python/utils.py
recipe =
	set -e
	set -o pipefail
	cat %{parse} | python %{cac_add_offsets} %{off} > %{target}

[out/%{portion}.%{lang}-eng.trg.baseline.der]
cond = %{portion in ('trial', 'dev', 'test') and lang in langs}
dep.parse = out/%{portion}.%{lang}-eng.trg.baseline.parse.tags
dep.parse2der = src/prolog/parse2der.pl
deps = src/prolog/slashes.pl src/prolog/util.pl src/prolog/der.pl
recipe = swipl --nosignals -l %{parse2der} -g main %{parse} > %{target}

[out/%{portion}.%{lang}-eng.trg.baseline.node]
cond = %{portion in ('trial', 'dev', 'test') and lang in langs}
dep.der = out/%{portion}.%{lang}-eng.trg.baseline.der
dep.der2node = src/prolog/der2node.pl
deps = src/prolog/util.pl src/prolog/der.pl src/prolog/node.pl src/prolog/slashes.pl src/prolog/cat.pl src/prolog/catobj.pl
recipe = swipl --nosignals -l %{der2node} -g main %{der} > %{target}

# DERIVATION PROJECTION #######################################################

[out/%{portion}.%{lang}-eng.src.mono.parse]
cond = %{portion in ('train', 'trial', 'dev', 'test') and lang in langs}
dep.tok = out/%{portion}.%{lang}-eng.src.ftok
dep.easyccg = ext/easyccg/easyccg.jar
dep.model = models/parse/eng.model
recipe =
	set -e
	set -o pipefail
	cat %{tok} | java -jar %{easyccg} --model %{model} --rootCategories S[dcl] S[wq] S[q] NP S[b]\\NP S[intj] --outputFormat boxer > %{target}

[out/%{portion}.%{lang}-eng.src.mono.parse.tags]
cond = %{portion in ('train', 'trial', 'dev', 'test') and lang in langs}
dep.parse = out/%{portion}.%{lang}-eng.src.mono.parse
dep.off = out/%{portion}.%{lang}-eng.src.ftok.off
dep.cac_add_offsets = src/python/cac_add_offsets.py
deps = src/python/caclib.py src/python/offlib.py src/python/util.py src/python/utils.py
recipe =
	set -e
	set -o pipefail
	cat %{parse} | python %{cac_add_offsets} %{off} > %{target}

[out/%{portion}.%{lang}-eng.src.mono.der]
cond = %{portion in ('train', 'trial', 'dev', 'test') and lang in langs}
dep.parse = out/%{portion}.%{lang}-eng.src.mono.parse.tags
dep.parse2der = src/prolog/parse2der.pl
deps = src/prolog/slashes.pl src/prolog/util.pl
recipe = swipl --nosignals -l %{parse2der} -g main %{parse} > %{target}

[out/%{portion}.%{lang}-eng.src.mono.node]
cond = %{portion in ('train', 'trial', 'dev', 'test') and lang in langs}
dep.der = out/%{portion}.%{lang}-eng.src.mono.der
dep.der2node = src/prolog/der2node.pl
deps = src/prolog/util.pl src/prolog/node.pl src/prolog/slashes.pl src/prolog/cat.pl src/prolog/catobj.pl
recipe = swipl --nosignals -l %{der2node} -g main %{der} > %{target}

[out/train.%{lang}-eng.trg.proj.%{nbest}.%{feats}.parse.tags]
cond = %{lang in langs and nbest.isdigit() and feats in ('feats', 'nofeats')}
dep.derproj = src/prolog/derproj.pl
deps = src/prolog/slashes.pl src/prolog/node.pl src/prolog/ccg.pl src/prolog/util.pl src/prolog/sr.pl src/prolog/tokoff.pl
dep.node = out/train.%{lang}-eng.src.mono.node
dep.wordalign = out/train.%{lang}-eng.%{nbest}.wordalign
dep.srctok = out/train.%{lang}-eng.src.ftok.off
dep.trgtok = out/train.%{lang}-eng.trg.ftok.off
strip_feats = %{'true' if feats == 'nofeats' else 'false'}
recipe = swipl -G4g --nosignals -l %{derproj} -g main %{node} %{wordalign} %{trgtok} %{srctok} offsets %{strip_feats} parse.tags > %{target} 2> %{target}.log

[out/%{portion}.%{lang}-eng.trg.proj.%{nbest}.%{feats}.node]
cond = %{portion in ('trial', 'dev', 'test') and lang in langs and nbest.isdigit() and feats in ('feats', 'nofeats')}
dep.derproj = src/prolog/derproj.pl
deps = src/prolog/slashes.pl src/prolog/node.pl src/prolog/ccg.pl src/prolog/util.pl src/prolog/sr.pl src/prolog/tokoff.pl
dep.node = out/%{portion}.%{lang}-eng.src.mono.node
dep.wordalign = out/%{portion}.%{lang}-eng.%{nbest}.wordalign
dep.srctok = out/%{portion}.%{lang}-eng.src.ftok.off
dep.trgtok = out/%{portion}.%{lang}-eng.trg.ftok.off
strip_feats = %{'true' if feats == 'nofeats' else 'false'}
recipe = swipl -G4g --nosignals -l %{derproj} -g main %{node} %{wordalign} %{trgtok} %{srctok} offsets %{strip_feats} node > %{target} 2> %{target}.log

[out/train.%{lang}-eng.trg.proj.%{nbest}.%{feats}.seenRules]
cond = %{lang in langs and nbest.isdigit() and feats in ('feats', 'nofeats')}
dep.parse2seenRules = src/prolog/parse2seenRules.pl
dep.parse = out/train.%{lang}-eng.trg.proj.%{nbest}.%{feats}.parse.tags
recipe =
	set -e
	set -o pipefail
	mkdir -p `dirname %{target}`
	swipl --nosignals -l %{parse2seenRules} -g main %{parse} | cut -d ' ' -f 1-2 | sort -u > %{target}

[out/train.%{lang}-eng.trg.proj.%{nbest}.%{feats}.unaryRules]
cond = %{lang in langs and nbest.isdigit() and feats in ('feats', 'nofeats')}
dep.parse2unaryRules = src/prolog/parse2unaryRules.pl
dep.parse = out/train.%{lang}-eng.trg.proj.%{nbest}.%{feats}.parse.tags
recipe =
	set -e
	mkdir -p `dirname %{target}`
	swipl --nosignals -l %{parse2unaryRules} -g main %{parse} | sort -u > %{target}

# PARSER TRAINING #############################################################

# We prepare three directories whose contents follow the structure expected by
# EasyCCG's training scripts:
# out/training/input/dev.%{lang} - for development data
# out/training/input/train.%{lang} - for training data
# out/training/output/polyglot-%{lang} - for word embeddings and model output

# Prepare word embeddings

[out/training/output/polyglot-%{lang}/embeddings.raw]
cond = %{lang in langs}
dep.pkl = data/embeddings/polyglot-%{twoletter_langs[lang]}.pkl
dep.polyglot2turian = src/python/polyglot2turian.py
recipe =
	set -e
	mkdir -p `dirname %{target}`
	python %{polyglot2turian} %{pkl} > %{target}

[out/training/output/polyglot-%{lang}/embeddings.words]
cond = %{lang in langs}
outputs = out/training/output/polyglot-%{lang}/embeddings.vectors
dep.raw = out/training/output/polyglot-%{lang}/embeddings.raw
dep.splitEmbeddings = ext/easyccg/training/splitEmbeddings.sh
recipe = sh %{splitEmbeddings} out/training/output/polyglot-%{lang}

[out/training/output/polyglot-%{lang}/embeddings.vectors]
cond = %{lang in langs}
deps = out/training/output/polyglot-%{lang}/embeddings.words

# Prepare data

[out/training/input/dev.%{lang}/gold.stagged]
cond = %{lang in langs}
dep.parse = data/dev.%{lang}-eng.trg.gold.parse.tags
dep.parse2stagged = src/prolog/parse2stagged.pl
deps = src/prolog/cat.pl src/prolog/ccg.pl src/prolog/ccgbank.pl src/prolog/util.pl
recipe =
	set -e
	mkdir -p `dirname %{target}`
	swipl --nosignals -l %{parse2stagged} -g main %{parse} > %{target}

[out/training/input/train.%{lang}.%{nbest}.%{feats}/gold.stagged]
cond = %{lang in langs and nbest.isdigit() and nbest.isdigit() and feats in ('feats', 'nofeats')}
dep.parse = out/train.%{lang}-eng.trg.proj.%{nbest}.%{feats}.parse.tags
dep.parse2stagged = src/prolog/parse2stagged.pl
deps = src/prolog/cat.pl src/prolog/ccg.pl src/prolog/ccgbank.pl src/prolog/util.pl
recipe =
	set -e
	mkdir -p `dirname %{target}`
	swipl --nosignals -l %{parse2stagged} -g main %{parse} > %{target}

# Train

[out/training/output/polyglot-%{lang}/train.xl.%{nbest}.%{feats}/bestModel]
cond = %{lang in langs and nbest.isdigit() and feats in ('feats', 'nofeats')}
dep/train = ext/easyccg/training/train.sh
embeddings = out/training/output/polyglot-%{lang}
dep.embeddings_words = %{embeddings}/embeddings.words
dep.embeddings_vectors = %{embeddings}/embeddings.vectors
train_data = out/training/input/train.%{lang}.%{nbest}.%{feats}
dev_data = out/training/input/dev.%{lang}
dep.train_stagged = %{train_data}/gold.stagged
dep.dev_stagged = %{dev_data}/gold.stagged
recipe =
	set -e
	export TORCH=`realpath ext/torch/install/bin/th`
	embeddings=`realpath %{embeddings}`
	train_data=`realpath %{train_data}`
	dev_data=`realpath %{dev_data}`
	cd ext/easyccg/training
	./train.sh $embeddings 0 3 3 $train_data $dev_data xl.%{nbest}.%{feats}

[out/training/output/polyglot-%{lang}/model.xl.%{nbest}.%{feats}]
cond = %{lang in langs and nbest.isdigit() and nbest.isdigit() and feats in ('feats', 'nofeats')}
train_data = out/training/input/train.%{lang}.%{nbest}.%{feats}
train_folder = out/training/output/polyglot-%{lang}/train.xl.%{nbest}.%{feats}
dep.bestModel = %{train_folder}/bestModel
dep.unaryRules = out/train.%{lang}-eng.trg.proj.%{nbest}.%{feats}.unaryRules
dep.seenRules = out/train.%{lang}-eng.trg.proj.%{nbest}.%{feats}.seenRules
embeddings = out/training/output/polyglot-%{lang}
recipe =
	set -e
	mkdir -p %{target}
	cp %{unaryRules} %{target}/unaryRules
	cp %{seenRules} %{target}/seenRules
	cp %{train_folder}/categories %{target}
	cp %{train_folder}/suffixes %{target}
	export TORCH=`realpath ext/torch/install/bin/th`
	embeddings=`realpath %{embeddings}`
	train_folder=`realpath %{train_folder}`
	model=`realpath %{target}`
	cd ext/easyccg/training
	$TORCH dump_model.lua $embeddings $train_folder $model
	touch $model

### EVALUATION ################################################################

[out/%{portion}.%{lang}-eng.%{side}.gold.parse.tags.renumbered]
cond = %{portion in ('trial', 'dev', 'test') and lang in langs and side in ('src', 'trg')}
dep.parse = data/%{portion}.%{lang}-eng.%{side}.gold.parse.tags
dep.cac_renumber = src/python/cac_renumber.py
recipe =
	set -e
	set -o pipefail
	mkdir -p out
	cat %{parse} | python %{cac_renumber} > %{target}

[out/%{portion}.%{lang}-eng.%{side}.gold.der]
cond = %{portion in ('trial', 'dev', 'test') and lang in langs and side in ('src', 'trg')}
dep.parse = out/%{portion}.%{lang}-eng.%{side}.gold.parse.tags.renumbered
dep.parse2der = src/prolog/parse2der.pl
deps = src/prolog/slashes.pl src/prolog/util.pl src/prolog/der.pl
recipe = swipl --nosignals -l %{parse2der} -g main %{parse} > %{target}

[out/%{portion}.%{lang}-eng.%{side}.gold.node]
cond = %{portion in ('trial', 'dev', 'test') and lang in langs and side in ('src', 'trg')}
dep.der = out/%{portion}.%{lang}-eng.%{side}.gold.der
dep.der2node = src/prolog/der2node.pl
deps = src/prolog/util.pl src/prolog/der.pl src/prolog/node.pl src/prolog/slashes.pl src/prolog/cat.pl src/prolog/catobj.pl
recipe = swipl --nosignals -l %{der2node} -g main %{der} > %{target}

[out/%{portion}.%{lang}-eng.%{side}.gold.deps]
cond = %{portion in ('trial', 'dev', 'test') and lang in langs and side in ('src', 'trg')}
dep.node = out/%{portion}.%{lang}-eng.%{side}.gold.node
dep.node2deps = src/prolog/node2deps.pl
deps = src/prolog/catobj.pl src/prolog/ccgbank.pl src/prolog/node.pl src/prolog/slashes.pl src/prolog/util.pl
recipe = swipl --nosignals -l %{node2deps} -g main %{node} det > %{target}

[out/%{portion}.%{lang}-eng.src.mono.deps]
cond = %{portion in ('trial', 'dev', 'test') and lang in langs}
dep.node = out/%{portion}.%{lang}-eng.src.mono.node
dep.node2deps = src/prolog/node2deps.pl
deps = src/prolog/util.pl src/prolog/node.pl src/prolog/catobj.pl
recipe = swipl --nosignals -l %{node2deps} -g main %{node} det > %{target}

[out/%{portion}.%{lang}-eng.trg.xl.%{nbest}.%{feats}.parse]
cond = %{portion in ('train', 'trial', 'dev', 'test') + xdata[lang] and lang in langs and nbest.isdigit() and feats in ('feats', 'nofeats')}
dep.tok = out/%{portion}.%{lang}-eng.trg.ftok
dep.easyccg = ext/easyccg/easyccg.jar
dep.model = out/training/output/polyglot-%{lang}/model.xl.%{nbest}.%{feats}
recipe =
	set -e
	set -o pipefail
	cat %{tok} | java -jar %{easyccg} --model %{model} --rootCategories S[dcl] S[wq] S[q] NP S[b]\\NP S[intj] --outputFormat boxer > %{target}

[out/%{portion}.%{lang}-eng.trg.xl.%{nbest}.%{feats}.parse.tags]
cond = %{portion in ('train', 'dev', 'test') and lang in langs and nbest.isdigit() and feats in ('feats', 'nofeats')}
dep.parse = out/%{portion}.%{lang}-eng.trg.xl.%{nbest}.%{feats}.parse
dep.off = out/%{portion}.%{lang}-eng.trg.ftok.off
dep.cac_add_offsets = src/python/cac_add_offsets.py
deps = src/python/caclib.py src/python/offlib.py src/python/util.py src/python/utils.py
recipe =
	set -e
	set -o pipefail
	cat %{parse} | python %{cac_add_offsets} %{off} > %{target}

[out/%{portion}.%{lang}-eng.trg.xl.%{nbest}.%{feats}.parse.tags]
cond = %{portion in xdata[lang] and lang in langs and nbest.isdigit() and feats in ('feats', 'nofeats')}
dep.parse = out/%{portion}.%{lang}-eng.trg.xl.%{nbest}.%{feats}.parse
dep.cac_add_toknums = src/python/cac_add_toknums.py
deps = src/python/caclib.py src/python/util.py src/python/utils.py
recipe =
	set -e
	set -o pipefail
	cat %{parse} | python %{cac_add_toknums} > %{target}

[out/%{portion}.%{lang}-eng.trg.xl.%{nbest}.%{feats}.der]
cond = %{portion in ('dev', 'test') + xdata[lang] and lang in langs and nbest.isdigit() and feats in ('feats', 'nofeats')}
dep.parse = out/%{portion}.%{lang}-eng.trg.xl.%{nbest}.%{feats}.parse.tags
dep.parse2der = src/prolog/parse2der.pl
deps = src/prolog/slashes.pl src/prolog/util.pl src/prolog/der.pl
recipe = swipl --nosignals -l %{parse2der} -g main %{parse} > %{target}

[out/%{portion}.%{lang}-eng.trg.xl.%{nbest}.%{feats}.node]
cond = %{portion in ('dev', 'test') + xdata[lang] and lang in langs and nbest.isdigit() and feats in ('feats', 'nofeats')}
dep.der = out/%{portion}.%{lang}-eng.trg.xl.%{nbest}.%{feats}.der
dep.der2node = src/prolog/der2node.pl
deps = src/prolog/util.pl src/prolog/der.pl src/prolog/node.pl src/prolog/slashes.pl src/prolog/cat.pl src/prolog/catobj.pl
recipe = swipl --nosignals -l %{der2node} -g main %{der} > %{target}

[out/%{portion}.%{lang}-eng.trg.baseline.deps]
cond = %{portion in ('trial', 'dev', 'test') and lang in langs}
dep.node = out/%{portion}.%{lang}-eng.trg.baseline.node
dep.node2deps = src/prolog/node2deps.pl
deps = src/prolog/util.pl src/prolog/node.pl src/prolog/catobj.pl
recipe = swipl --nosignals -l %{node2deps} -g main %{node} det > %{target}

[out/%{portion}.%{lang}-eng.trg.%{status}.%{nbest}.%{feats}.deps]
cond = %{portion in ('trial', 'dev', 'test') + xdata[lang] and lang in langs and status in ('proj', 'xl') and nbest.isdigit() and feats in ('feats', 'nofeats')}
dep.node = out/%{portion}.%{lang}-eng.trg.%{status}.%{nbest}.%{feats}.node
dep.node2deps = src/prolog/node2deps.pl
deps = src/prolog/util.pl src/prolog/node.pl src/prolog/catobj.pl
style = %{dep_style(portion)}
recipe = swipl --nosignals -l %{node2deps} -g main %{node} %{style} > %{target}

[out/%{portion}.%{lang}-eng.src.mono.eval]
cond = %{portion in ('trial', 'dev', 'test') and lang in langs}
dep.gold = out/%{portion}.%{lang}-eng.src.gold.deps
dep.pred = out/%{portion}.%{lang}-eng.src.mono.deps
dep.eval = src/python/eval.py
recipe = python3 %{eval} %{gold} %{pred} > %{target}

[out/%{portion}.%{lang}-eng.trg.baseline.eval]
cond = %{portion in ('trial', 'dev', 'test') and lang in langs}
dep.gold = out/%{portion}.%{lang}-eng.trg.gold.deps
dep.pred = out/%{portion}.%{lang}-eng.trg.baseline.deps
dep.eval = src/python/eval.py
recipe = python3 %{eval} %{gold} %{pred} > %{target}

[out/%{portion}.%{lang}-eng.trg.%{status}.%{nbest}.%{feats}.eval]
cond = %{portion in ('trial', 'dev', 'test') + xdata[lang] and lang in langs and status in ('proj', 'xl') and nbest.isdigit() and feats in ('feats', 'nofeats')}
dep.gold = out/%{portion}.%{lang}-eng.trg.gold.deps
dep.pred = out/%{portion}.%{lang}-eng.trg.%{status}.%{nbest}.%{feats}.deps
dep.eval = src/python/eval.py
recipe = python3 %{eval} %{gold} %{pred} > %{target}

### LEXICON INSPECTION ########################################################

[out/train.%{lang}-eng.src.mono.cats]
cond = %{lang in langs}
dep.parse = out/train.%{lang}-eng.src.mono.parse.tags
dep.parse2cats = src/prolog/parse2cats.pl
recipe =
	set -e
	set -o pipefail
	swipl -l %{parse2cats} -g main %{parse} | sort | uniq -c | sort -nk 1 > %{target}

[out/train.%{lang}-eng.trg.xl.%{nbest}.%{feats}.cats]
cond = %{lang in langs and nbest.isdigit() and feats in ('feats', 'nofeats')}
dep.parse = out/train.%{lang}-eng.trg.xl.%{nbest}.%{feats}.parse.tags
dep.parse2cats = src/prolog/parse2cats.pl
recipe =
	set -e
	set -o pipefail
	swipl -l %{parse2cats} -g main %{parse} | sort | uniq -c | sort -nk 1 > %{target}
