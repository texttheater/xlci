# TOKENIZATION ################################################################

[out/%{portion}.%{lang}-eng.src.tok.off]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld')}
dep.raw = data/%{portion}.%{lang}-eng.src.raw
dep.txt2iob = src/python/txt2iob.py
dep.elephant = ext/elephant/src/elephant
dep.model = models/tok.iob/eng.model
dep.iob2off = src/python/iob2off.py
dep.iob_filter = src/python/iob_filter.py
recipe =
	set -e
	set -o pipefail
	mkdir -p out
	export PATH=ext/elephant/ext:$PATH
	cat %{raw} | python3 %{txt2iob} | sed -e 's/^10$/10\n/' | %{elephant} -m %{model} -f iob -F iob | head -n -1 | sed -e 's/\t/ /' | python3 %{iob_filter} | python %{iob2off} > %{target}

[out/%{portion}.%{lang}-eng.src.tok]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld')}
dep.off = out/%{portion}.%{lang}-eng.src.tok.off
dep.off2tok = src/python/off2tok.py
recipe =
	set -e
	set -o pipefail
	cat %{off} | python %{off2tok} > %{target}

[out/%{portion}.%{lang}-eng.trg.tok]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld')}
dep.raw = data/%{portion}.%{lang}-eng.trg.raw
dep.ucto_wrapper = src/python/ucto_wrapper.py
recipe =
	set -e
	set -o pipefail
	mkdir -p out
	cat %{raw} | python3 %{ucto_wrapper} > %{target}

[go/bin/iobify]
recipe = GOPATH=`pwd`/go go get github.com/texttheater/iobify/iobify

[out/%{portion}.%{lang}-eng.trg.tok.off]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld')}
dep.iobify = go/bin/iobify
dep.raw = data/%{portion}.%{lang}-eng.trg.raw
dep.tok = out/%{portion}.%{lang}-eng.trg.tok
dep.iob2off = src/python/iob2off.py
recipe =
	set -e
	set -o pipefail
	%{iobify} %{raw} %{tok} | python %{iob2off} > %{target}

# FILTERING ###################################################################

# Keep only the document pairs where each side has exactly one sentence:

[out/%{portion}.%{lang}-eng.ftok]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld')}
dep.tok_merge = src/python/tok_merge.py
dep.trg = out/%{portion}.%{lang}-eng.trg.tok
dep.src = out/%{portion}.%{lang}-eng.src.tok
recipe = python3 %{tok_merge} %{trg} %{src} > %{target}

[out/%{portion}.%{lang}-eng.src.ftok]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld')}
dep.ftok = out/%{portion}.%{lang}-eng.ftok
recipe =
	set -e
	set -o pipefail
	cat %{ftok} | cut -d '	' -f 2 > %{target}

[out/%{portion}.%{lang}-eng.trg.ftok]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld')}
dep.ftok = out/%{portion}.%{lang}-eng.ftok
recipe =
	set -e
	set -o pipefail
	cat %{ftok} | cut -d '	' -f 1 > %{target}

[out/%{portion}.%{lang}-eng.%{side}.ftok.off]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld') and side in ('src', 'trg')}
dep.ftok = out/%{portion}.%{lang}-eng.%{side}.ftok
dep.off = out/%{portion}.%{lang}-eng.%{side}.tok.off
dep.off_filter = src/python/off_filter.py
recipe =
	set -e
	set -o pipefail
	python3 %{off_filter} %{ftok} %{off} > %{target}

# WORD ALIGNMENT ##############################################################

# These rules follow the tutorial at:
# http://fabioticconi.wordpress.com/2011/01/17/how-to-do-a-word-alignment-with-giza-or-mgiza-from-parallel-corpus/

# Convert to lower case and swap src and trg (!)
[out/%{portion}.%{lang}-eng.%{side}.low]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld') and side in ('src', 'trg')}
oldside = %{'trg' if side == 'src' else 'src'}
dep.ftok = out/%{portion}.%{lang}-eng.%{oldside}.ftok
recipe =
	set -e
	set -o pipefail
	cat %{ftok} | tr '[:upper:]' '[:lower:]' > %{target}

# Create vocabulary files and numeric versions of texts
[out/%{portion}.%{lang}-eng.%{side}.%{x}]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld') and side in ('src', 'trg') and x in ('snt', 'vcb')}
srcsnt = out/%{portion}.%{lang}-eng.src.snt
trgsnt = out/%{portion}.%{lang}-eng.trg.snt
srcvcb = out/%{portion}.%{lang}-eng.src.vcb
trgvcb = out/%{portion}.%{lang}-eng.trg.vcb
outputs = %{srcsnt} %{trgsnt} %{srcvcb} %{trgvcb}
dep.srclow = out/%{portion}.%{lang}-eng.src.low
dep.trglow = out/%{portion}.%{lang}-eng.trg.low
recipe =
	set -e
	set -o pipefail
	./ext/mgizapp/bin/plain2snt %{trglow} %{srclow} -vcb1 %{trgvcb} -vcb2 %{srcvcb} -snt1 %{trgsnt} -snt2 %{srcsnt}
	touch %{outputs}

# Cluster vocabulary into classes
[out/%{portion}.%{lang}-eng.%{side}.vcb.classes]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld') and side in ('src', 'trg')}
dep.low = out/%{portion}.%{lang}-eng.%{side}.low
recipe = ./ext/mgizapp/bin/mkcls -n10 -p%{low} -V%{target}

# Make co-occurrence file
[out/%{portion}.%{lang}-eng.cooc]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld')}
dep.srcvcb = out/%{portion}.%{lang}-eng.src.vcb
dep.trgvcb = out/%{portion}.%{lang}-eng.trg.vcb
dep.srcvcbclasses = out/%{portion}.%{lang}-eng.src.vcb.classes
dep.trgvcbclasses = out/%{portion}.%{lang}-eng.trg.vcb.classes
dep.snt = out/%{portion}.%{lang}-eng.src.snt
recipe = ./ext/mgizapp/bin/snt2cooc %{target} %{srcvcb} %{trgvcb} %{snt}

# Word-align
[out/%{portion}.%{lang}-eng.dict]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld')}
dep.srcvcb = out/%{portion}.%{lang}-eng.src.vcb
dep.trgvcb = out/%{portion}.%{lang}-eng.trg.vcb
dep.snt = out/%{portion}.%{lang}-eng.src.snt
dep.cooc = out/%{portion}.%{lang}-eng.cooc
outputfileprefix = out/%{portion}.%{lang}-eng.dict
ncpus = 4
dep.dict_sort = src/python/dict_sort.py
recipe =
	set -e
	set -o pipefail
	(./ext/mgizapp/bin/mgiza -ncpus %{ncpus} -sourcevocabularyfile %{srcvcb} -targetvocabularyfile %{trgvcb} -corpusfile %{snt} -outputfileprefix %{outputfileprefix} -coocurrencefile %{cooc} 1>&2) 2> %{target}.log
	cat %{'out/{}.{}-eng.dict.A3.final.part{}'.format(portion, lang, chr(48 + i)) for i in range(int(ncpus))} | python3 %{dict_sort} > %{target}

# DERIVATION PROJECTION #######################################################

[out/%{portion}.%{lang}-eng.src.parse]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld')}
dep.tok = out/%{portion}.%{lang}-eng.src.ftok
dep.easyccg = ext/easyccg/easyccg.jar
dep.cac_renumber = src/python/cac_renumber.py
dep.model = models/parse/eng.model
recipe =
	set -e
	set -o pipefail
	cat %{tok} | java -jar %{easyccg} --model %{model} --rootCategories S[dcl] S[wq] S[q] NP S[b]\\NP S[intj] --outputFormat boxer > %{target}

[out/%{portion}.%{lang}-eng.src.parse.tags]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld')}
dep.parse = out/%{portion}.%{lang}-eng.src.parse
dep.off = out/%{portion}.%{lang}-eng.src.ftok.off
dep.cac_add_offsets = src/python/cac_add_offsets.py
deps = src/python/caclib.py src/python/offlib.py src/python/util.py src/python/utils.py
recipe =
	set -e
	set -o pipefail
	cat %{parse} | python %{cac_add_offsets} %{off} > %{target}

[out/%{portion}.%{lang}-eng.src.der]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld')}
dep.parse = out/%{portion}.%{lang}-eng.src.parse.tags
dep.parse2der = src/prolog/parse2der.pl
deps = src/prolog/slashes.pl src/prolog/util.pl
recipe = swipl --nosignals -l %{parse2der} -g main %{parse} > %{target}

[out/%{portion}.%{lang}-eng.dict.pl]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld')}
dep.dict = out/%{portion}.%{lang}-eng.dict
dep.dict2pl = src/python/dict2pl.py
recipe =
	set -e
	set -o pipefail
	cat %{dict} | python %{dict2pl} > %{target}

[out/%{portion}.%{lang}-eng.%{side}.ftok.pl]
cond = %{portion in ('proj1', 'train') and lang in ('deu', 'ita', 'nld') and side in ('src', 'trg')}
dep.off = out/%{portion}.%{lang}-eng.%{side}.ftok.off
dep.off2pl = src/python/off2pl.py
recipe =
	set -e
	set -o pipefail
	cat %{off} | python3 %{off2pl} %{side} > %{target}

[out/%{portion}.%{lang}-eng.trg.parse.tags]
dep.derproj = src/prolog/derproj.pl
dep.der = out/%{portion}.%{lang}-eng.src.der
dep.dict = out/%{portion}.%{lang}-eng.dict.pl
dep.srctok = out/%{portion}.%{lang}-eng.src.ftok.pl
dep.trgtok = out/%{portion}.%{lang}-eng.trg.ftok.pl
recipe = swipl --nosignals -l %{derproj} -g main %{der} %{dict} %{srctok} %{trgtok} > %{target}
